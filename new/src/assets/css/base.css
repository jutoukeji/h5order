@charset "utf-8";
body {
	overflow-y: visible !important;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	user-select: none;
}

body,
html {
	width: 100%;
	height: 100%;
	font-size: 100px;
	/*overflow-x: hidden;*/
	-webkit-overflow-scrolling: touch;
    overflow: hidden;
}

body {
	font-size: 0.14rem;
	font-family: Microsoft YaHei, Arial;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	text-rendering: optimizeLegibility;
	color: #333;
}

body * {
	box-sizing: border-box;
	-moz-box-sizing: border-box;
	-webkit-tap-highlight-color: rgba(255,255,255,0);
}

/*****内外边距初始化*****/
html, body, div, h1, h2, h3, h4, h5, h6, p, span, img, input, textarea, ul, ol, li, hr {
	margin: 0;
	padding: 0;
}

/*****去除list默认样式****/
ul, ol {
    list-style-type: none;
}

/*******去除a标签默认样式********/
a {
    text-decoration: none;
}

/****去除em,i标签的默认样式****/
em, i{
	font-style: normal;
}

/*****元素类型***/
.inline {
    display: inline !important;
}
.block {
    display: block !important;
}
.inline-block {
    display: inline-block !important;
}
.hide{
	display: none !important;
}

/***文本位置***/
.txt-center{
	text-align: center;
}
.txt-left{
	text-align: left;
}
.txt-right{
	text-align: right;
}

/*****首行缩进*****/
.text-indent {
    text-indent: 0.02rem;
}

/*****强制换行*****/
.text-wrap {
    word-wrap: break-word;
    word-break: normal;
}

/*****常用定位方式*****/
.absolute {
    position: absolute;
}

.relative {
    position: relative;
}

.fixed {
    position: fixed;
}

/*****页面框架定格*****/
section.main{
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
}
section.main.fixed{
	width: 100%;
    height: 100%;
    position: fixed;
}
section.main.fixed > article {
    -webkit-flex: 1;
    flex: 1;
    overflow-x: hidden;
    overflow-y: scroll;
    height: 100%;
    position: relative;
}

/******flex布局******/
.flex-box{
	display: flex;
	display: -webkit-flex;
}

/**
 * 容器属性flex-direction： 属性决定主轴的方向（即项目的排列方向）。
 * row（默认值）：主轴为水平方向，起点在左端。
 * row-reverse：主轴为水平方向，起点在右端。
 * column：主轴为垂直方向，起点在上沿。
 * column-reverse：主轴为垂直方向，起点在下沿。
 */
.flex-box.direction-row-reverse{
	flex-direction: row-reverse;
}
.flex-box.direction-column{
	flex-direction: column;
}
.flex-box.direction-column-reverse{
	flex-direction: column-reverse;
}

/**
 * 容器属性justify-content 属性定义了项目在主轴上的对齐方式。
 * flex-start（默认值）：左对齐
 * flex-end：右对齐
 * center： 居中
 * space-between：两端对齐，项目之间的间隔都相等。
 * space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
 */
.flex-box.jtfc-flex-end{
	justify-content: flex-end;
}
.flex-box.jtfc-center{
	justify-content: center;
}
.flex-box.jtfc-space-between{
	justify-content: space-between;
}
.flex-box.jtfc-space-around{
	justify-content: space-around;
}


/**
 * 容器属性(flex-wrap): 超出时是否换行
 * nowrap: 默认不换行 
 * wrap: 换行
 * wrap-reverse: 换行且第一行在下面
 */
.flex-box.wrap{
	flex-wrap: wrap;
}
.flex-box.wrap-reverse{
	flex-wrap: wrap-reverse;
}

/**
 * 容器属性(align-items): 定义项目在交叉轴上如何对齐。
 * flex-start：交叉轴的起点对齐。
 * flex-end：交叉轴的终点对齐。
 * center：交叉轴的中点对齐。
 * baseline: 项目的第一行文字的基线对齐。
 * stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
 */
.flex-box.ai-flex-start{
	align-items: flex-start;
}
.flex-box.ai-flex-end{
	align-items: flex-end;
}
.flex-box.ai-center{
	align-items: center;
}
.flex-box.ai-baseline{
	align-items: baseline;
}

/**
 * 容器属性(align-content): 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
 * flex-start：与交叉轴的起点对齐。
 * flex-end：与交叉轴的终点对齐。
 * center：与交叉轴的中点对齐。
 * space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
 * space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
 * stretch（默认值）：轴线占满整个交叉轴。
 */
.flex-box.ac-flex-start{
	align-content: flex-start;
}
.flex-box.ac-flex-end{
	align-content: flex-end;
}
.flex-box.ac-center{
	align-content: center;
}
.flex-box.ac-space-between{
	align-content: space-between;
}
.flex-box.ac-space-around{
	align-content: space-around;
}


/**
 * 项目属性(order)： 定义项目的排列顺序。数值越小，排列越靠前，默认为0。
 */
.flex-box > .order0{
	order: -1;
}

/**
 * 项目属性(flex-grow): 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
 * 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。
 * 如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
 */
.flex-box > .grow1{
	flex-grow: 1;
}
.flex-box > .grow2{
	flex-grow: 2;
}

/**
 * 项目属性(flex-shrink):定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
 * 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。
 * 如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
 * 负值对该属性无效。
 */
.flex-box > .shrink0{
	flex-shrink: 0;
}
.flex-box > .shrink1{
	flex-shrink: 1;
}

/**
 * 项目属性(flex-basis): 定义了在分配多余空间之前，项目占据的主轴空间（main size）。
 * 浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
 * 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。
 */
.flex-box > .basis{
	/*有需要时添加*/
}

/**
 * 项目属性(flex): 
 * 是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
 */
.flex-box > .flex1{
	flex: 1;
}
.flex-box > .flex2{
	flex: 2;
}
.flex-box > .flex3{
	flex: 3;
}
.flex-box > .flex4{
	flex: 4;
}
.flex-box > .flex5{
	flex: 5;
}

/**
 * 项目属性(align-self):属性允许单个项目有与其他项目不一样的对齐方式，
 * 可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，
 * 如果没有父元素，则等同于stretch。
 * 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。
 */
.flex-box > .as-xx{
	/*有需要时添加*/
}

/**
 * 手机上面实现1像素边框（pc上面预览时无边框）
 */
.border-bottom{
    background-image: -webkit-gradient(linear, left top, left bottom, from(#d9d9d9), color-stop(50%, #d9d9d9), color-stop(50%, transparent));
    background-image: linear-gradient(180deg, #d9d9d9, #d9d9d9 50%, transparent 50%);
    background-size: 120% 1px;
    background-repeat: no-repeat;
    background-position: bottom left;
    background-origin: content-box;
    -webkit-box-align: center;
}
.border-top{
	background-image: -webkit-gradient(linear, left top, left bottom, from(#d9d9d9), color-stop(50%, #d9d9d9), color-stop(50%, transparent));
    background-image: linear-gradient(180deg, #d9d9d9, #d9d9d9 50%, transparent 50%);
    background-size: 120% 1px;
    background-repeat: no-repeat;
    background-position: top left;
    background-origin: content-box;
    -webkit-box-align: center;
}

section{
	height: 100%;
	display: flex;
	display: -webkit-flex;
	flex-direction: column;
}
article{
	height: 100%;
	overflow-x: hidden;
	overflow-y: scroll;
}

/**
 * css 实现loading效果
 */
.dot{
	display: inline-block;
	height: 0.1rem;
	line-height: 0.1rem;
	overflow: hidden;
	text-align: left;
	letter-spacing: 0.03rem;
	margin-left: 0.02rem;
}
.dot::before{
	display: block;
	content: '...\A..\A.';
	white-space: pre-wrap;
	animation: dot 1.5s infinite step-start both;
	-webkit-animation: dot 1.5s infinite step-start both;
}
@keyframes dot{
	33%{transform: translateY(-0.2rem);}
	66%{transform: translateY(-0.1rem);}
}
@-webkit-keyframes dot{
	33%{transform: translateY(-0.2rem);}
	66%{transform: translateY(-0.1rem);}
}

.animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}

.animated.infinite {
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}
/*动画延迟1s执行*/
.animated.delay-1s {
  -webkit-animation-delay: 1s;
  animation-delay: 1s;
}

@-webkit-keyframes fadeIn {
  from {opacity: 0;}
  to {opacity: 1;}
}

@keyframes fadeIn {
  from {opacity: 0;}
  to {opacity: 1;}
}

@-webkit-keyframes fadeInUp {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    -webkit-transform: translate3d(0, 100%, 0);
    transform: translate3d(0, 100%, 0);
  }
  to {
    opacity: 1;
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
}

.zoomIn {
	-webkit-animation-name: zoomIn;
	animation-name: zoomIn;
	-webkit-animation-duration: 350ms;
	animation-duration: 350ms;
	-webkit-animation-fill-mode: both;
	animation-fill-mode: both;
}

@-webkit-keyframes zoomIn {
  0% , 100%{
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
  25% {
    -webkit-transform: scale3d(0.6, 0.6, 0.6);
    transform: scale3d(0.6, 0.6, 0.6);
  }
  50% {
    -webkit-transform: scale3d(1.2, 1.2, 1.2);
    transform: scale3d(1.2, 1.2, 1.2);
  }
  75% {
    -webkit-transform: scale3d(0.8, 0.8, 0.8);
    transform: scale3d(0.8, 0.8, 0.8);
  }
}

@keyframes zoomIn {
  0% , 100%{
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
  25% {
    -webkit-transform: scale3d(0.6, 0.6, 0.6);
    transform: scale3d(0.6, 0.6, 0.6);
  }
  50% {
    -webkit-transform: scale3d(1.2, 1.2, 1.2);
    transform: scale3d(1.2, 1.2, 1.2);
  }
  75% {
    -webkit-transform: scale3d(0.8, 0.8, 0.8);
    transform: scale3d(0.8, 0.8, 0.8);
  }
}

